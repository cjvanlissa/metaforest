% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/WeightedScatter.R
\name{WeightedScatter}
\alias{WeightedScatter}
\title{Plots weighted scatterplots for meta-analytic data. Can plot effect size as
a function of either continuous (numeric, integer) or categorical (factor,
character) predictors.}
\usage{
WeightedScatter(data, yi = "yi", vi = "vi", vars = "all.continuous",
  tau2 = NULL, summarize = FALSE)
}
\arguments{
\item{data}{A data.frame.}

\item{yi}{Character. The name of the column in \code{data} that contains the
meta-analysis effect sizes. Defaults to \code{"yi"}.}

\item{vi}{Character. The name of the column in the \code{data} that contains
the variances of the effect sizes. Defaults to \code{"vi"}. By default,
\code{vi} is used to calculate fixed-effects weights, because fixed effects
weights summarize the data set at hand, rather than generalizing to the
population.}

\item{vars}{Character vector containing either 1) the names of specific
moderator variables to plot, or 2)  scatterplots. If empty, all moderators
are plotted. Note, however, that continuous and categorical variables cannot
be plotted at the same time.}

\item{tau2}{Numeric. Provide an optional value for tau2. If this value is
provided, random-effects weights will be used instead of fixed-effects
weights.}

\item{summarize}{Logical. Should summary stats be displayed? Defaults to
FALSE. If TRUE, a smooth trend line is displayed for continuous variables,
using [stats::loess()] for less than 1000 observations, and [mgcv::gam()] for
larger datasets. For categorical variables, box-and-whiskers plots are
displayed. Outliers are omitted, because the raw data fulfill this function.}
}
\value{
A ggplot object.
}
\description{
Plots weighted scatterplots for meta-analytic data. Can plot effect size as
a function of either continuous (numeric, integer) or categorical (factor,
character) predictors.
}
\examples{
set.seed(42)
data <- SimulateSMD(k_train = 100, model = es * x[, 1] + es * x[, 2] + es *
                                           x[, 1] * x[, 2])$training
WeightedScatter(data, summarize = TRUE)
WeightedScatter(data, tau2 = .04)
data$X2 <- factor(ifelse(data$X2 > mean(data$X2), "Low", "High"))
data$X3 <- factor(ifelse(data$X3 > mean(data$X3), "Small", "Big"))
WeightedScatter(data, vars = "all.factors", summarize = TRUE)
}
