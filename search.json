[{"path":"https://cjvanlissa.github.io/metaforest/articles/Introduction_to_metaforest.html","id":"tutorial-example","dir":"Articles","previous_headings":"","what":"Tutorial example","title":"Introduction to metaforest","text":"illustrate use MetaForest, re-analyze published work Fukkink Lont (2007), graciously shared data. authors examined effectiveness training competency childcare providers. sample small, consisting 78 effect sizes derived 17 unique samples. First, check model convergence examining cumulative mean squared --bag prediction error (MSE) function number trees model. MSE stabilizes, model said converged. model converged within approximately 5000 trees. Thus, use number trees subsequent analyses. now apply recursive pre-selection using preselect function. Using preselect_vars, retain moderators 50% percentile interval variable importance metrics include zero.","code":"# Install the metaforest package. This needs to be done only once. install.packages(\"metaforest\") # Then, load the metaforest package library(metaforest) # Assign the fukkink_lont data, which is included in # the metaforest package, to an object called \"data\" data <- fukkink_lont # Because MetaForest uses the random number generator (for bootstrapping), # we set a random seed so analyses can be replicated exactly. set.seed(62) # Run model with many trees to check convergence check_conv <- MetaForest(yi~.,                         data = data,                         study = \"id_exp\",                         whichweights = \"random\",                         num.trees = 20000) # Plot convergence trajectory plot(check_conv) # Model with 5000 trees for replication mf_rep <- MetaForest(yi~.,                         data = data,                         study = \"id_exp\",                         whichweights = \"random\",                         num.trees = 5000) # Run recursive preselection, store results in object 'preselect' preselected <- preselect(mf_rep,                          replications = 100,                          algorithm = \"recursive\") # Plot the results plot(preselected) # Retain only moderators with positive variable importance in more than # 50% of replications retain_mods <- preselect_vars(preselected, cutoff = .5)"},{"path":"https://cjvanlissa.github.io/metaforest/articles/Introduction_to_metaforest.html","id":"tuning-parameters","dir":"Articles","previous_headings":"Tutorial example","what":"Tuning parameters","title":"Introduction to metaforest","text":"MetaForest several “tuning parameters”, whose optimal values must determined empirically: 1) number candidate variables considered split tree; 2) minimum number cases must remain post-split group within tree; 3) type weights (uniform, fixed-, random-effects). optimal values tuning parameters commonly determined using cross-validation, well-known machine learning R-package caret. Next, tune model using R-package caret. function ModelInfo_mf tells caret tune MetaForest analysis. tuning parameters, consider three types weights (uniform, fixed-, random-effects), number candidate variables split 2-6, minimum node size 2-6. select model smallest prediction error (RMSE) final model, based 10-fold clustered cross-validation. object returned train already contains final model, estimated best combination tuning parameters. Consequently, can proceed directly reporting results. First, examine convergence . , examine Roob2R^2_{oob}.","code":"# Load the caret library library(caret) # Set up 10-fold grouped (=clustered) CV grouped_cv <- trainControl(method = \"cv\",                             index = groupKFold(data$id_exp, k = 10))  # Set up a tuning grid for the three tuning parameters of MetaForest tuning_grid <- expand.grid(whichweights = c(\"random\", \"fixed\", \"unif\"),                        mtry = 2:6,                        min.node.size = 2:6)  # X should contain only retained moderators, clustering variable, and vi X <- data[, c(\"id_exp\", \"vi\", retain_mods)]  # Train the model mf_cv <- train(y = data$yi,                x = X,                study = \"id_exp\", # Name of the clustering variable                method = ModelInfo_mf(),                 trControl = grouped_cv,                tuneGrid = tuning_grid,                num.trees = 5000) # Examine optimal tuning parameters mf_cv$results[which.min(mf_cv$results$RMSE), ]"},{"path":"https://cjvanlissa.github.io/metaforest/articles/Introduction_to_metaforest.html","id":"inspecting-the-results","dir":"Articles","previous_headings":"Tutorial example","what":"Inspecting the results","title":"Introduction to metaforest","text":"can conclude model converged, positive estimate explained variance new data. Now, proceed interpreting model findings. plot variable importance, partial dependence plots. exploratory, non-parametric analysis, conclude whether findings “significant”. However, PartialDependence function two settings help visualize “importance” finding: rawdata, plots weighted raw data (studies larger weights plotted larger point size), thereby visualizing variance around mean prediction, pi, plots (e.g., 95%) percentile interval predictions individual trees model. confidence interval, show variable stable model predictions . exploratory moderator analysis followed linear regression model, focusing relevant moderators identified MetaForest.","code":"# For convenience, extract final model final <- mf_cv$finalModel # Extract R^2_{oob} from the final model r2_oob <- final$forest$r.squared # Plot convergence plot(final) # Plot variable importance VarImpPlot(final) # Sort the variable names by importance, so that the # partial dependence plots will be ranked by importance ordered_vars <- names(final$forest$variable.importance)[   order(final$forest$variable.importance, decreasing = TRUE)] # Plot partial dependence PartialDependence(final, vars = ordered_vars,                   rawdata = TRUE, pi = .95)"},{"path":"https://cjvanlissa.github.io/metaforest/articles/Introduction_to_metaforest.html","id":"more-information","dir":"Articles","previous_headings":"","what":"More information","title":"Introduction to metaforest","text":"following open-access book chapter elaborate tutorial, including reporting guidelines: Van Lissa, C. J. (2020). Small sample meta-analyses: Exploring heterogeneity using MetaForest. R. Van De Schoot & M. Miočević (Eds.), Small Sample Size Solutions (Open Access): Guide Applied Researchers Practitioners. CRC Press. https://doi.org/10.4324/9780429273872-16 Moreover, applied examples MetaForest analyses available published papers, open data syntax. instance, Curry colleagues (2019) used MetaForest examine moderators effect acts kindness well-, found none. full syntax data available Github; https://github.com/cjvanlissa/kindness_meta-analysis. Secondly, Bonapersona colleagues (2019) used MetaForest identify moderators effect early life adversity behavioral phenotype animal models. full syntax data available https://osf.io/ra947/. Thirdly, Bialek colleagues used MetaForest examine moderators “mere ownership” effect: People’s tendency value . studies illustrate different applications MetaForest, different reporting practices.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Caspar J. Van Lissa. Author, maintainer.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Van Lissa C (2020). “Small sample meta-analyses: exploring heterogeneity using metaForest.” Van De Schoot R, Miočević M (eds.), Small sample size solutions (open access): guide applied researchers practitioners., chapter 13, 186–202. CRC Press. doi:10.4324/9780429273872-16.","code":"@InBook{,   title = {Small sample meta-analyses: exploring heterogeneity using metaForest.},   author = {C. J. {Van Lissa}},   booktitle = {Small sample size solutions (open access): A guide for applied researchers and practitioners.},   chapter = {13},   editor = {R. {Van De Schoot} and M. Miočević},   year = {2020},   publisher = {CRC Press},   pages = {186–202},   doi = {10.4324/9780429273872-16}, }"},{"path":[]},{"path":"https://cjvanlissa.github.io/metaforest/index.html","id":"background","dir":"","previous_headings":"","what":"Background","title":"Exploring Heterogeneity in Meta-Analysis using Random Forests","text":"goal MetaForest explore heterogeneity meta-analytic data, identify important moderators, explore functional form relationship moderators effect size. , MetaForest conducts weighted random forest analysis, using random-effects fixed-effects weights, classic meta-analysis, uniform weights (unweighted random forest). Simulation studies demonstrated technique substantial power detect relevant moderators, even datasets small 20 cases (based cross-validated R2). Using variable importance plot, important moderators can identified, using partial prediction plots, shape marginal relationship moderators effect size can visualized. MetaForest can readily integrated classical meta-analytic approaches: MetaForest conducted primary analysis, classic meta-analysis can used quantify heterogeneity (fact, MetaForest default reports random-effects meta-analysis raw data, residuals random forests analysis), provide simplified representation linear effects important predictors. Conversely, theory-driven classical meta-analysis complemented exploratory MetaForest analysis, final check ensure important moderators overlooked. hope approach use researchers, availability user-friendly R functions facilitate adoption.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Exploring Heterogeneity in Meta-Analysis using Random Forests","text":"can install metaforest CRAN :","code":"install.packages(\"metaforest\")"},{"path":"https://cjvanlissa.github.io/metaforest/index.html","id":"documentation","dir":"","previous_headings":"","what":"Documentation","title":"Exploring Heterogeneity in Meta-Analysis using Random Forests","text":"Every user-facing function package documented, documentation can accessed running ?function_name R console, e.g., ?graph, checking project website","code":""},{"path":"https://cjvanlissa.github.io/metaforest/index.html","id":"citing-metaforest","dir":"","previous_headings":"","what":"Citing metaforest","title":"Exploring Heterogeneity in Meta-Analysis using Random Forests","text":"can cite method referencing open access book chapter: Van Lissa, C. J. (2020). Small sample meta-analyses: Exploring heterogeneity using MetaForest. R. Van De Schoot & M. Miočević (Eds.), Small Sample Size Solutions (Open Access): Guide Applied Researchers Practitioners. CRC Press. https://doi.org/10.4324/9780429273872-16 simulation study supporting method available : Van Lissa, C. J. (2018). MetaForest: Exploring heterogeneity meta-analysis using random forests. PsyArxiv. https://doi.org/10.31234/osf.io/myg6s","code":""},{"path":"https://cjvanlissa.github.io/metaforest/index.html","id":"contributing-and-contact-information","dir":"","previous_headings":"","what":"Contributing and Contact Information","title":"Exploring Heterogeneity in Meta-Analysis using Random Forests","text":"ideas, please get involved. can contribute opening issue GitHub, sending pull request proposed features. File GitHub issue Make pull request participating project, agree abide Contributor Code Conduct v2.0. Contributions package must adhere tidyverse style guide. contributing code, please add tests contribution tests/testthat folder, ensure tests pass GitHub Actions panel.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/index.html","id":"example-analysis","dir":"","previous_headings":"","what":"Example analysis","title":"Exploring Heterogeneity in Meta-Analysis using Random Forests","text":"example demonstrates one might go conducting meta-analysis using MetaForest. information, check package vignette.","code":"#Load metaforest package library(metaforest)  #Simulate a meta-analysis dataset with 20 studies, 1 relevant moderator, and 4 irrelevant moderators set.seed(42) data <- SimulateSMD()$training  #Conduct an unweighted MetaForest analysis, to estimate the residual tau2 mf.unif <- MetaForest(formula = yi ~ ., data = data,                       whichweights = \"unif\", method = \"DL\", num.trees = 2000)  #Extract the result of this analysis and print them results <- summary(mf.unif) results #> MetaForest results #>                                           #> Type of analysis:              MetaForest #> Number of studies:             20         #> Number of moderators:          5          #> Number of trees in forest:     2000       #> Candidate variables per split: 2          #> Minimum terminal node size:    5          #> OOB prediction error (MSE):    0.1012     #> R squared (OOB):               0.2970     #>  #> Tests for Heterogeneity:  #>                                tau2   tau2_SE I^2     H^2    Q-test  df Q_p    #> Raw effect sizes:              0.0553 0.0486  37.2642 1.5940 30.2857 19 0.0483 #> Residuals (after MetaForest):  0.0099 0.0334  9.6420  1.1067 21.0275 19 0.3353 #>  #>  #> Random intercept meta-analyses: #>                                Intercept se     ci.lb   ci.ub   p      #> Raw effect sizes:              -0.2136   0.0875 -0.3851 -0.0421 0.0147 #> Residuals (after MetaForest):  0.0357    0.0720 -0.1053 0.1768  0.6197  #Conduct a weighted MetaForest analysis, using the residual tau2 from the #unweighted analysis above mf.random <- MetaForest(formula = yi ~ ., data = data,                       whichweights = \"random\", method = \"DL\",                        tau2 = results$rma[2,1],                       num.trees = 2000)  #Print the result of this analysis summary(mf.random) #> MetaForest results #>                                           #> Type of analysis:              MetaForest #> Number of studies:             20         #> Number of moderators:          5          #> Number of trees in forest:     2000       #> Candidate variables per split: 2          #> Minimum terminal node size:    5          #> OOB prediction error (MSE):    0.0945     #> R squared (OOB):               0.3438     #>  #> Tests for Heterogeneity:  #>                                tau2   tau2_SE I^2     H^2    Q-test  df Q_p    #> Raw effect sizes:              0.0553 0.0486  37.2642 1.5940 30.2857 19 0.0483 #> Residuals (after MetaForest):  0.0031 0.0312  3.2094  1.0332 19.6300 19 0.4171 #>  #>  #> Random intercept meta-analyses: #>                                Intercept se     ci.lb   ci.ub   p      #> Raw effect sizes:              -0.2136   0.0875 -0.3851 -0.0421 0.0147 #> Residuals (after MetaForest):  0.0298    0.0693 -0.1059 0.1656  0.6666"},{"path":"https://cjvanlissa.github.io/metaforest/reference/MetaForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","title":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","text":"MetaForest uses weighted random forest explore heterogeneity meta-analytic data. MetaForest wrapper ranger (Wright & Ziegler, 2015). input, MetaForest takes study effect sizes variances (can computed, example, using metafor package), well moderators included model. default, MetaForest uses random-effects weights, estimates -studies variance using restricted maximum-likelihood estimator. However, may beneficial first conduct unweighted MetaForest, use estimated residual heterogeneity model estimate tau2 random-effects weighted MetaForest.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/MetaForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","text":"","code":"MetaForest(   formula,   data,   vi = \"vi\",   study = NULL,   whichweights = \"random\",   num.trees = 500,   mtry = NULL,   method = \"REML\",   tau2 = NULL,   ... )"},{"path":"https://cjvanlissa.github.io/metaforest/reference/MetaForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","text":"formula Formula. Specify formula MetaForest model, example, yi ~ . predict outcome yi moderators data. additive formulas allowed (.e., x1+x2+x3). Interaction terms non-linear terms required, random forests algorithm inherently captures associations. data data.frame containing effect size, moderators, variance effect size. vi Character. Specify name column data contains variances effect sizes. column removed data prior analysis. Defaults \"vi\". study Character. Optionally, specify name column data contains study id. Use data includes multiple effect sizes per study. column can vector integers, factor. column removed data prior analysis. See Details information analyzing dependent data. whichweights Character. Indicate time weights required. random-effects MetaForest grown specifying whichweights = \"random\". fixed-effects MetaForest grown specifying whichweights = \"fixed\". unweighted MetaForest grown specifying whichweights = \"unif\". Defaults \"random\". num.trees Atomic integer. Specify number trees forest. Defaults 500. mtry Atomic integer. Number candidate moderators available split. Defaults square root number moderators (rounded ). method Character. Specify method estimate residual variance. Can set one following: \"DL\", \"\", \"SJ\", \"ML\", \"REML\", \"EB\", \"HS\", \"GENQ\". Default \"REML\". See metafor package information estimators. tau2 Numeric. Specify predetermined value residual heterogeneity. Entering value supersedes estimated tau2 value. Defaults NULL. ... Additional arguments passed directly ranger. recommended use additional arguments.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/MetaForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","text":"List length 3. \"forest\" element list object class \"ranger\", containing results random forests analysis. \"rma_before\" element object class \"rma.uni\", containing results random-effects meta-analysis raw data, without moderators. \"rma_after\" element object class \"rma.uni\", containing results random-effects meta-analysis residual heterogeneity, difference effect sizes predicted MetaForest observed effect sizes.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/MetaForest.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","text":"dependent data, clustered MetaForest analysis appropriate. predictive performance MetaForest analysis evaluated --bootstrap cases, cases bootstrap sample originate study, model overly confident ability predict value. MetaForest clustered study variable, dataset first split two cross-validation samples study. dependent effect sizes study thus included cross-validation sample. , two random forests grown cross-validation samples, random forest, sample used calculate prediction error variable importance, see doi:10.1007/s11634-016-0276-4 .","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/MetaForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Conduct a MetaForest analysis to explore heterogeneity in meta-analytic data. — MetaForest","text":"","code":"#Example 1: #Simulate data with a univariate linear model set.seed(42) data <- SimulateSMD() #Conduct unweighted MetaForest analysis mf.unif <- MetaForest(formula = yi ~ ., data = data$training,                       whichweights = \"unif\", method = \"DL\") #Print model mf.unif #> Call: #> MetaForest(formula = yi ~ ., data = data$training, whichweights = \"unif\",  #>     method = \"DL\") #>  #> R squared (OOB):                  0.2768  #> Residual heterogeneity (tau2):    0.0120  #Conduct random-effects weighted MetaForest analysis mf.random <- MetaForest(formula = yi ~ ., data = data$training,                         whichweights = \"random\", method = \"DL\",                         tau2 = 0.0116) #Print summary summary(mf.random) #> MetaForest results #>                                           #> Type of analysis:              MetaForest #> Number of studies:             20         #> Number of moderators:          5          #> Number of trees in forest:     500        #> Candidate variables per split: 2          #> Minimum terminal node size:    5          #> OOB prediction error (MSE):    0.0925     #> R squared (OOB):               0.3576     #>  #> Tests for Heterogeneity:  #>                                tau2   tau2_SE I^2    H^2    Q-test  df   Q_p    #> Raw effect sizes:              0.0116    NA      NA     NA     NA   <NA>    NA  #> Residuals (after MetaForest):  0.0000 0.0302  0.0000 1.0000 18.9321 19   0.4612 #>  #>  #> Random intercept meta-analyses: #>                                Intercept se     ci.lb   ci.ub  p      #> Raw effect sizes:                 NA        NA     NA      NA     NA  #> Residuals (after MetaForest):  0.0327    0.0680 -0.1005 0.1660 0.6300  #Example 2: Real data from metafor #Load and clean data data(\"dat.bangertdrowns2004\", package = \"metadat\") df <- dat.bangertdrowns2004 df[, c(4:12)] <- apply(df[ , c(4:12)], 2, function(x){   x[is.na(x)] <- median(x, na.rm = TRUE)   x}) df$subject <- factor(df$subject) df$yi <- as.numeric(df$yi) #Conduct MetaForest analysis mf.bd2004 <- MetaForest(formula = yi~ grade + length + minutes + wic+                                meta, df, whichweights = \"unif\") #Print MetaForest object mf.bd2004 #> Call: #> MetaForest(formula = yi ~ grade + length + minutes + wic + meta,  #>     data = df, whichweights = \"unif\") #>  #> R squared (OOB):                  0.0887  #> Residual heterogeneity (tau2):    0.0672  #Check convergence plot plot(mf.bd2004)  #Check summary summary(mf.bd2004, digits = 4) #> MetaForest results #>                                           #> Type of analysis:              MetaForest #> Number of studies:             48         #> Number of moderators:          5          #> Number of trees in forest:     500        #> Candidate variables per split: 2          #> Minimum terminal node size:    5          #> OOB prediction error (MSE):    0.1426     #> R squared (OOB):               0.0887     #>  #> Tests for Heterogeneity:  #>                                tau2   tau2_SE I^2     H^2    Q-test   df Q_p    #> Raw effect sizes:              0.0499 0.0197  58.3740 2.4023 107.1061 47 0.0000 #> Residuals (after MetaForest):  0.0672 0.0238  65.3486 2.8859 129.8299 47 0.0000 #>  #>  #> Random intercept meta-analyses: #>                                Intercept se     ci.lb   ci.ub  p      #> Raw effect sizes:              0.2219    0.0460 0.1317  0.3122 0.0000 #> Residuals (after MetaForest):  -0.0361   0.0502 -0.1345 0.0624 0.4726 #Examine variable importance plot VarImpPlot(mf.bd2004)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_mf.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns a MetaForest ModelInfo list for use with caret — ModelInfo_mf","title":"Returns a MetaForest ModelInfo list for use with caret — ModelInfo_mf","text":"function allows users rely powerful caret package cross-validating tuning MetaForest analysis. Methods MetaForest included caret package, interface caret entirely compatible MetaForest's model call. Specifically, MetaForest compatible train methods classes 'formula' 'recipe', variance effect size must column training data x. name column specified using argument 'vi'.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_mf.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns a MetaForest ModelInfo list for use with caret — ModelInfo_mf","text":"","code":"ModelInfo_mf()"},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_mf.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns a MetaForest ModelInfo list for use with caret — ModelInfo_mf","text":"ModelInfo list length 17.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_mf.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns a MetaForest ModelInfo list for use with caret — ModelInfo_mf","text":"train clustered MetaForest, nested data structures, simply provide optional argument 'study' train function, specify study ID. refer column x. training clustered MetaForest, make sure use 'index = groupKFold(your_study_id_variable, k = 10))' traincontrol, sample study ID creating cross-validation partitions; otherwise testing error positively biased.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_mf.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns a MetaForest ModelInfo list for use with caret — ModelInfo_mf","text":"","code":"if (FALSE) { # \\dontrun{ # Prepare data data <- dat.bangertdrowns2004 data[, c(4:12)] <- apply(data[ , c(4:12)], 2, function(x){   x[is.na(x)] <- median(x, na.rm = TRUE)   x}) data$subject <- factor(data$subject) data$yi <- as.numeric(data$yi) # Load caret library(caret) set.seed(999) # Specify the resampling method as 10-fold CV fit_control <- trainControl(method = \"cv\", number = 10) cv_mf_fit <- train(y = data$yi, x = data[,c(3:13, 16)],                    method = ModelInfo_mf(), trControl = fit_control)   # Cross-validated clustered MetaForest data(\"dat.bourassa1996\", package = \"metadat\") df <- dat.bourassa1996 df <- escalc(measure = \"OR\", ai = lh.le, bi = lh.re, ci = rh.le, di= rh.re,                data = df, add = 1/2, to = \"all\") df$mage[is.na(df$mage)] <- median(df$mage, na.rm = TRUE) df[c(5:8)] <- lapply(df[c(5:8)], factor) df$yi <- as.numeric(df$yi) # Set up 10-fold grouped CV fit_control <- trainControl(method = \"cv\", index = groupKFold(df$sample,                             k = 10)) # Set up a custom tuning grid for the three tuning parameters of MetaForest rf_grid <- expand.grid(whichweights = c(\"random\", \"fixed\", \"unif\"),                        mtry = c(2, 4, 6),                        min.node.size = c(2, 4, 6)) # Train the model cv.mf.cluster <- train(y = df$yi, x = df[, c(\"selection\", \"investigator\",                                                  \"hand_assess\", \"eye_assess\",                                                  \"mage\", \"sex\", \"vi\",                                                  \"sample\")],                        study = \"sample\", method = ModelInfo_mf(),                        trControl = fit_control,                        tuneGrid = rf_grid) } # }"},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_rma.html","id":null,"dir":"Reference","previous_headings":"","what":"Returns an rma ModelInfo list for use with caret — ModelInfo_rma","title":"Returns an rma ModelInfo list for use with caret — ModelInfo_rma","text":"function allows users rely powerful caret package cross-validating tuning rma analysis. Methods rma included caret package, interface caret entirely compatible rma's model call. Specifically, rma compatible train methods classes 'formula' 'recipe'.  variance effect sizes can passed 'weights' parameter train.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_rma.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Returns an rma ModelInfo list for use with caret — ModelInfo_rma","text":"","code":"ModelInfo_rma()"},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_rma.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Returns an rma ModelInfo list for use with caret — ModelInfo_rma","text":"ModelInfo list length 13.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_rma.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Returns an rma ModelInfo list for use with caret — ModelInfo_rma","text":"using clustered data (effect sizes within studies), make sure use 'index = groupKFold(your_study_id_variable, k = 10))' traincontrol, sample study ID creating cross-validation partitions; otherwise testing error positively biased.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/ModelInfo_rma.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Returns an rma ModelInfo list for use with caret — ModelInfo_rma","text":"","code":"if (FALSE) { # \\dontrun{ # Prepare data data(\"dat.bcg\", package = \"metadat\") dat <- escalc(measure=\"RR\", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg) dat$yi <- as.numeric(dat$yi) dat$alloc <- factor(dat$alloc) # Run rma rma.model <- metafor::rma(y = dat$yi, mods = dat[, c(\"ablat\", \"year\")], vi = dat$vi) # R^2 is estimated to be .64 rma.model$R2 # Now, use cross-validation to see how well this model generalizes # Leave-one-out cross-validation is more appropriate than 10-fold cv because # the sample size is very small fit_control <- trainControl(method = \"LOOCV\") # Train the model without tuning, because rma has no tuning parameters cv.mf.cluster <- train(y = dat$yi, x = dat[, c(\"ablat\", \"year\")],                        weights = dat$vi,                        method = ModelInfo_rma(),                        trControl = fit_control) # Cross-validated R^2 is .08, suggesting substantial overfitting of the # original rma model cv.mf.cluster$results$Rsquared } # }"},{"path":"https://cjvanlissa.github.io/metaforest/reference/PartialDependence.html","id":null,"dir":"Reference","previous_headings":"","what":"PartialDependence: Partial dependence plots — PartialDependence","title":"PartialDependence: Partial dependence plots — PartialDependence","text":"Partial dependence plots","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/PartialDependence.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"PartialDependence: Partial dependence plots — PartialDependence","text":"","code":"PartialDependence(   x,   vars = NULL,   pi = NULL,   rawdata = FALSE,   bw = FALSE,   resolution = NULL,   moderator = NULL,   mod_levels = NULL,   output = \"plot\",   ... )"},{"path":"https://cjvanlissa.github.io/metaforest/reference/PartialDependence.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"PartialDependence: Partial dependence plots — PartialDependence","text":"x Model object. vars Character vector containing moderator names plot partial dependence plots. empty, moderators plotted. pi Numeric (0-1). percentile interval plotted partial dependence predictions? Defaults NULL. obtain 95% interval, set .95. rawdata Logical, indicating whether plot weighted raw data. Defaults FALSE. Uses weights model object passed x argument. bw Logical, indicating whether plot black white, color. resolution Integer vector length two, giving resolution partial predictions. first element indicates resolution partial predictions; Monte-Carlo integration, second element gives number rows data sampled without replacement averaging values predictors. moderator Atomic character vector, referencing name one variable model. Results partial prediction plots, conditional moderator. moderator references factor variable, separate lines/boxplots plotted factor level. moderator references numeric variable, heatmaps plotted - unless moderator categorized using mod_levels argument. mod_levels Vector. moderator continuous, specify thresholds cut function. continuous moderator categorized, predictions based median moderator value within category. can call quantile cut moderator specific quantiles. moderator factor variable, can use mod_levels specify character vector factor levels retain plot (.e., dropping factor levels). output Character. type output returned? Defaults \"plot\", returns plots gtable object. obtain list ggplot objects instead, provide argument \"list\". ... Additional arguments passed functions.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/PartialDependence.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"PartialDependence: Partial dependence plots — PartialDependence","text":"gtable object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/PartialDependence.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"PartialDependence: Partial dependence plots — PartialDependence","text":"Plots partial dependence plots (predicted effect size function value predictor variable) MetaForest- rma model object. rma models, advisable mean-center numeric predictors, include plot_int effects, except rma model bivariate, plot_int argument set TRUE.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/PartialDependence.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"PartialDependence: Partial dependence plots — PartialDependence","text":"","code":"if (FALSE) { # \\dontrun{ #' # Partial dependence plot for MetaForest() model: set.seed(42) data <- SimulateSMD(k_train = 200, model = es * x[, 1] + es * x[, 2] + es *                                            x[, 1] * x[, 2])$training data$X2 <- cut(data$X2, breaks = 2, labels = c(\"Low\", \"High\")) mf.random <- MetaForest(formula = yi ~ ., data = data,                         whichweights = \"random\", method = \"DL\",                         tau2 = 0.2450) # Examine univariate partial dependence plot for all variables in the model: PartialDependence(mf.random, pi = .8) # Examine bivariate partial dependence plot the plot_int between X1 and X2: pd.plot <- PartialDependence(mf.random, vars = c(\"X1\", \"X2\"), plot_int = TRUE) # Save to pdf file pdf(\"pd_plot.pdf\") grid.draw(pd.plot) dev.off() # Partial dependence plot for metafor rma() model: data(\"dat.bcg\", package = \"metadat\") dat <- escalc(measure=\"RR\", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg) dat$yi <- as.numeric(dat$yi) dat$alloc <- factor(dat$alloc) dat$ablat_d <- cut(dat$ablat, breaks = 2, labels = c(\"low\", \"high\")) # Demonstrate partial dependence plot for a bivariate plot_int rma.model.int <- metafor::rma(yi, vi, mods=cbind(ablat, tpos),                      data=dat, method=\"REML\") PartialDependence(rma.model.int, rawdata = TRUE, pi = .95,                   plot_int = TRUE)  # Compare partial dependence for metaforest and rma dat2 <- dat dat2[3:7] <- lapply(dat2[3:7],                     function(x){as.numeric(scale(x, scale = FALSE))}) mf.model.all <- MetaForest(yi ~ ., dat2[, c(3:11)]) rma.model.all <- metafor::rma(dat$yi, dat2$vi,                   mods = model.matrix(yi~., dat2[, c(3:10)])[, -1],                   method=\"REML\") PartialDependence(mf.model.all, rawdata = TRUE, pi = .95) PartialDependence(rma.model.all, rawdata = TRUE, pi = .95) } # }"},{"path":"https://cjvanlissa.github.io/metaforest/reference/SimulateSMD.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulates a meta-analytic dataset — SimulateSMD","title":"Simulates a meta-analytic dataset — SimulateSMD","text":"function simulates meta-analytic dataset based random-effects model. simulated effect size Hedges' G, estimator Standardized Mean Difference. functional form model can specified, moderators can either normally distributed Bernoulli-distributed. See Van Lissa, 2018, detailed explanation simulation procedure.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/SimulateSMD.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulates a meta-analytic dataset — SimulateSMD","text":"","code":"SimulateSMD(   k_train = 20,   k_test = 100,   mean_n = 40,   es = 0.5,   tau2 = 0.04,   moderators = 5,   distribution = \"normal\",   model = es * x[, 1] )"},{"path":"https://cjvanlissa.github.io/metaforest/reference/SimulateSMD.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulates a meta-analytic dataset — SimulateSMD","text":"k_train Atomic integer. number studies training dataset. Defaults 20. k_test Atomic integer. number studies testing dataset. Defaults 100. mean_n Atomic integer. mean sample size simulated study meta-analytic dataset. Defaults 40. simulated study, sample size n randomly drawn normal distribution mean mean_n, sd mean_n/3. es Atomic numeric vector. effect size, also known beta, used model statement. Defaults .5. tau2 Atomic numeric vector. residual heterogeneity. Defaults 0.04. moderators Atomic integer. number moderators simulate study. Make sure number moderators simulated least large number moderators referred model parameter. Internally, matrix moderators referred \"x\". Defaults 5. distribution Atomic character. distribution moderators. Can set either \"normal\" \"bernoulli\". Defaults \"normal\". model Expression. expression specify model simulate mean true effect size, mu. formula may use terms \"es\" (referring es parameter call SimulateSMD), \"x[, ]\" (referring matrix moderators, x). Thus, specify mean effect size, mu, function effect size first moderator, one pass value model = es * x[ , 1]. Defaults es * x[ , 1].","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/SimulateSMD.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulates a meta-analytic dataset — SimulateSMD","text":"List length 4. \"training\" element list data.frame k_train rows. columns variance effect size, vi; effect size, yi, moderators, X. \"testing\" element list data.frame k_test rows. columns effect size, yi, moderators, X. \"housekeeping\" element list data.frame k_train + k_test rows. columns n, sample size n simulated study; mu_i, mean true effect size simulated study; theta_i, true effect size simulated study.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/SimulateSMD.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Simulates a meta-analytic dataset — SimulateSMD","text":"Van Lissa, C. J. (2020). Small sample meta-analyses: exploring heterogeneity using metaForest. R. Van De Schoot & M. Miočević (Eds.), Small sample size solutions (open access): guide applied researchers practitioners. CRC Press (pp.186–202). doi:10.4324/9780429273872-16  Van Lissa, C. J. (2018). MetaForest: Exploring heterogeneity meta-analysis using random forests. PsyArxiv. doi:10.31234/osf.io/myg6s","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/SimulateSMD.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulates a meta-analytic dataset — SimulateSMD","text":"","code":"set.seed(8) SimulateSMD() #> $training #>            vi          yi         X1          X2           X3         X4 #> 1  0.10203008 -0.29398896 -1.1444094 -1.04043881  0.062535228  1.0148301 #> 2  0.08522324 -1.05004992 -1.7215353  0.02465913  0.231113964 -0.8321755 #> 3  0.11681403 -0.56288787 -0.3696855  0.86220033  1.517608501 -1.4727851 #> 4  0.14655758  1.33340253  1.8220755  0.70828681 -0.498742894  0.4537334 #> 5  0.07785210  0.18586277  0.4775898 -0.63656810  0.004252849  0.6631271 #> 6  0.11685791  1.10151909  0.1405485  0.90875200  0.359516304 -0.7153895 #> 7  0.10640890 -0.64747180 -1.7260245 -0.58273245  2.082965890  2.0207644 #> 8  0.14712820 -0.38464515  0.2765317  0.08109775 -1.408034082  1.9224919 #> 9  0.38000714  0.17596855 -1.3627597 -0.04364549  1.217850494 -0.5379136 #> 10 0.11878046 -0.01505409  0.8354238  0.27538614  0.721791139 -1.1210611 #> 11 0.15549760  1.32530940  2.2256232  1.03476676 -0.201646518 -0.7519621 #> 12 0.08957362  0.40904980  0.1722670 -0.44401335  0.095368307 -0.4055921 #> 13 0.11684822 -1.73838165 -1.5005928 -1.34238940 -2.032627280 -0.1743360 #> 14 0.18469118 -0.84998262 -1.3466174 -0.16337964 -1.775771585  0.9972979 #> 15 0.11703169 -1.29509008 -2.4010823 -0.24919870  0.066025885  0.5076123 #> 16 0.12790515  0.31764430  0.7935204  0.66247074 -1.224103992 -0.9695288 #> 17 0.06828162  0.63264296  0.4438913  0.64397076  1.578454567  0.2136013 #> 18 0.10985373  0.51095349  0.5038261 -0.85192796 -0.204568006 -0.6238114 #> 19 0.07929649  1.31225812  1.4280847 -0.72472537  0.413325429  0.3302807 #> 20 0.10629565  0.06994284 -1.8320869 -0.13801556 -0.355544375 -1.3008866 #>             X5 #> 1   0.88819728 #> 2   0.29270972 #> 3   0.31683564 #> 4  -2.02425302 #> 5  -0.91530048 #> 6  -0.34304121 #> 7  -0.61830454 #> 8   1.96917331 #> 9   1.28234666 #> 10  1.21800036 #> 11 -1.27702516 #> 12  2.08310267 #> 13 -0.65815868 #> 14 -0.34382308 #> 15  0.74423183 #> 16 -1.32233177 #> 17  0.39138003 #> 18 -0.09488615 #> 19  1.13265525 #> 20  0.46624137 #>  #> $testing #>              yi          X1           X2          X3          X4           X5 #> 21   0.66822969  1.34278280 -0.345707310  1.57818995 -0.44913981  0.705276551 #> 22   1.14976311  2.43894434  0.407881830 -1.09289061  0.02348950 -1.346451232 #> 23  -0.08996973  0.67693611 -0.542383594 -0.76616169  0.32860881  1.606175428 #> 24  -0.85126944 -1.96898063 -2.233980278 -2.44080992 -0.65851847  2.978035548 #> 25  -0.21095617  0.08038142  1.317620135 -0.66787498 -0.69390119  0.889280799 #> 26  -0.28505282 -0.70476923  0.421883928 -0.87779243 -1.02011480 -0.364122280 #> 27   1.42561465  0.59725232 -0.742518989 -0.24948742 -1.10058841  0.054619107 #> 28   0.22666273  0.79577963  0.246548388 -0.91454381 -1.61812166 -0.589375171 #> 29  -1.02761756 -1.03083607 -0.534765887  0.08087580  2.14679976  0.050225736 #> 30   0.59061935 -0.41952683 -1.375543934 -0.08288448 -0.71783589  2.617582843 #> 31  -0.01700093  0.16009113 -0.410783842 -0.40642879  0.89826920  0.627148220 #> 32   0.03276619 -0.56448033  1.072109345  0.69900714 -1.15007197 -0.827227458 #> 33   0.03926500  0.22750654  0.944193458  0.47244670 -1.04069937  0.504060258 #> 34   0.41097112  0.25707888 -0.660594907  0.98195504 -0.06291613 -0.394589512 #> 35  -0.49098768 -0.33770080  0.463225218 -1.44548947  1.37773115  0.357938059 #> 36  -0.41254464  0.30457246 -0.833497207  0.01650441  0.62319204 -0.115376387 #> 37   0.72602926  0.72443709 -1.656108832 -0.19116183 -0.69531851  0.680534148 #> 38  -0.12909938 -0.68517330 -0.242947018  0.60615056  0.34736006  0.377851898 #> 39  -0.15842320  0.66148590 -0.734829314  1.11059186 -1.66093486  0.386261629 #> 40   0.49299914  1.72541962  0.288050068 -0.02910979  1.22541007  0.549553058 #> 41   0.50610349  0.32134570 -2.519865202 -0.29233821  1.04911272  0.613320135 #> 42  -1.00525772  0.57631589  0.559240717  1.47869193  0.07042518 -0.795713800 #> 43  -0.67371732 -1.40999218 -0.370775118  0.73176907  0.34117199 -1.490813982 #> 44  -0.50289312 -0.99550207 -0.246350631 -1.19898977 -0.45694682 -0.769902613 #> 45   0.50431041  1.56029895 -1.068533578  1.51577158  0.36241300  1.625447491 #> 46   0.88685955  0.20359400  0.188859634 -0.36821179  0.43088979  0.903666849 #> 47  -0.70385005 -0.38763480 -0.700101046 -0.61153291 -3.28193174 -0.938239707 #> 48   1.11709753  0.91961483 -0.054871878 -0.99407239  0.07959148 -0.863328748 #> 49  -0.26009914 -0.37973893  0.004724072  0.22384503  0.28338913 -0.012054345 #> 50   0.47557698  0.74424525  0.513744294  1.24460620 -1.13800059 -1.018069491 #> 51  -0.26393460 -1.18318210 -0.232082803 -2.14666505  0.55833481 -1.304871448 #> 52   0.36147994  0.27641906 -0.503803381  0.52658047  1.45478371 -0.907842475 #> 53   0.07970255 -0.35621772  0.931147030 -0.13259284  0.91997026  0.045246555 #> 54   0.32843947  0.98772386  0.866682884 -0.36330720 -2.45861485  1.591761639 #> 55   0.37604723 -0.26723365 -1.615076668 -0.89040754  1.35749161  0.146493228 #> 56   0.24895657  0.48002729 -0.414854751 -0.54416473 -0.73312796 -0.463292606 #> 57   1.06896275  0.76742274  0.295879429 -0.46053733  0.38481593  0.236661956 #> 58   0.01179023  0.93944209 -0.501413917 -0.19810448  0.92773032  0.664210399 #> 59   0.24653265 -1.05321259  0.168396365 -0.05398731 -1.23938949  0.629995102 #> 60   0.02307407  1.01361777 -1.484505096  0.06713632  1.73655423 -0.219841525 #> 61  -0.25616540 -1.25417324 -0.935164736  1.37062115  0.46932808  0.001456405 #> 62   0.02411692 -0.38058363 -1.318323265 -1.71261554  0.27094446 -0.450508307 #> 63  -0.74419979  0.20908883 -0.843522645 -1.54077184 -0.66946378 -0.418097081 #> 64   0.26424977 -0.12475618 -0.180237064  1.42855685  0.54643929  0.338293573 #> 65   1.09889987  2.18637793 -1.473517194 -1.19629850  0.29537750 -0.393182816 #> 66   0.28142974  0.08202324  0.296855110  0.88030339 -1.13881229 -0.354461946 #> 67   1.66695308  2.11210205  0.483606325 -1.68208244  1.29022620 -1.206672296 #> 68   0.77291745  1.03434270  0.068466459  1.69888450 -2.22984375 -0.412220453 #> 69  -0.11320584 -0.19817321  0.288832146 -0.15496161  1.28430248  0.386628349 #> 70  -0.54707185 -1.03922958  1.314781376 -1.27400097 -1.41318801 -0.619818844 #> 71  -0.36965484 -0.13366410 -0.295572687 -0.58194548 -0.69842091  1.081208993 #> 72  -0.53441321 -0.58203619 -0.064578436 -0.43066068  0.82325010 -1.678908961 #> 73   0.03831820 -0.90301123  0.776282190  0.30444699 -1.14748923 -1.440690533 #> 74  -0.34719728 -0.80183175 -1.079610620  0.33526170  0.02986996 -1.422982215 #> 75   0.61514177  1.32082067  0.592149208 -2.28425822 -0.05187127 -1.138380472 #> 76   0.68789771  1.03917965  0.326762664 -0.87895358 -0.29070076 -1.560017465 #> 77  -0.09672290  0.55811104 -2.295856107  0.98105921 -0.06218890 -0.468259305 #> 78  -0.74027615 -1.32868715 -0.402928719  0.74271560 -1.07172843  0.467356785 #> 79  -1.16326147 -1.92455679  1.125903449  0.10056759 -1.16839102 -0.146917636 #> 80   0.52833995  0.02269541  1.063092737  0.16902021 -0.19654398  1.624582143 #> 81  -0.07904639 -0.58148841 -1.156393348  0.34330655 -1.23256601  0.424045409 #> 82   1.02657912 -0.22415163 -0.954671006  1.03191632  1.67582582 -0.560888865 #> 83   0.30907212  1.19843419 -0.642356883  1.61580763  0.14981857 -0.229831775 #> 84  -0.34046644 -1.35857871 -0.129691509 -2.05943539  1.10504698  0.994997471 #> 85   0.13103045 -0.02007139  0.295829171  0.71146123 -0.16625956 -0.669661078 #> 86   0.68051453  0.89013344  0.824899518 -0.19750984 -1.62326723  0.071204845 #> 87   0.12433401 -0.02785890 -1.148831250 -1.55998272  0.54408680 -1.183813504 #> 88  -0.87246555 -0.87933866  1.585573941  0.39203385  0.43202330 -0.976633307 #> 89   0.88858779  0.76532204 -0.132846093 -0.10443202 -1.73795791  1.869923666 #> 90   0.99109805 -0.97758855 -0.118899731 -0.30398595  1.32981739 -0.575898320 #> 91   0.17345653  0.53030495  0.119426695 -0.37146423 -0.82576253 -1.019094922 #> 92   0.23095085  0.93490598  0.193494092  1.28880895 -0.74782165 -0.649659900 #> 93  -0.10370354  0.34618828  1.469472441  0.16832416 -2.13353795  1.533933071 #> 94  -0.53466699 -0.73358085 -2.160397828  0.79351401  0.36263912 -0.107787116 #> 95   0.88380862  0.71044321  2.309691146 -1.43665381 -0.23749230  0.169535331 #> 96  -0.08109247 -0.32270804  0.984586572 -2.80920276 -0.91259245  1.008258732 #> 97  -0.06717729 -0.36063854  1.510773654  0.24555120 -0.54637269  1.177163008 #> 98  -0.34213584  0.15515330 -0.044507754 -0.42755197  0.17847832  0.837676659 #> 99  -0.51101709 -1.39090615 -1.153481015  0.32787243 -0.99193808  0.669284255 #> 100  0.35873286  1.37319401  2.294143138  0.24435018 -0.86142982 -0.243659774 #> 101 -0.45132111 -0.86514969  0.538671399  0.94024364  0.45566891  1.129335915 #> 102 -0.02134494 -1.30250885 -0.146357462 -0.13692522 -2.05915568 -0.041590377 #> 103  0.75858908  0.89342076 -0.979218618 -1.85424344  0.16398290  0.914060323 #> 104 -0.34981144 -0.88037666 -1.831172832  1.64373845  0.78839628  0.432991085 #> 105 -0.37632586 -0.41661945  1.870035998 -0.14302351 -1.09377744 -0.936613809 #> 106 -0.08913409 -0.04062916 -1.503020392 -0.52419166 -0.53807090 -0.582746486 #> 107  0.67550059  0.14358965  2.318318542  0.78931815 -0.22432943 -0.090653685 #> 108 -0.33840336  0.09751138 -1.256282212  0.96144097  1.46733421  1.957436095 #> 109 -0.39774616  0.16642969 -0.938503513  1.29350891 -1.60605679  0.843387407 #> 110  1.05740527  1.47631110 -0.526780039 -1.35604594 -0.54841970  0.115736923 #> 111 -1.44354981 -1.54600953 -1.733278053 -0.85199073 -1.12518922  0.051878985 #> 112  1.17984868  1.37092704 -1.078728380 -1.10291173  0.37742996 -0.559855595 #> 113 -0.57377293 -0.30687696 -0.369739572  0.84291478 -0.35847353  0.039211626 #> 114 -0.41396429 -0.17814964  1.418624142 -0.40487444  0.02549246  0.573795451 #> 115  0.75905338  0.84086555 -0.960515383  0.34463034 -0.83657908 -1.722671808 #> 116 -0.81228643 -0.70385466  0.444572597  0.11589273  0.34432991  1.525124902 #> 117 -0.01695148 -0.38034853  0.920231427  0.02267681  1.26276866 -0.035198961 #> 118 -0.13456486 -0.61284745  0.248415976  1.81038765  0.32824879 -0.187316677 #> 119 -1.17201462 -0.84761010 -0.258117777  0.18494050 -0.03846550  0.602229762 #> 120  1.87942283  1.45125747  2.300613151 -0.42790075  0.55285433  0.401261034 #>  #> $housekeeping #>      n        mu_i      theta_i #> 1   38 -0.57220472 -0.110403011 #> 2   52 -0.86076766 -0.994550735 #> 3   34 -0.18484276 -0.479947194 #> 4   32  0.91103776  1.073673824 #> 5   50  0.23879490  0.077083550 #> 6   38  0.07027426  0.295637889 #> 7   38 -0.86301223 -0.698699491 #> 8   26  0.13826583 -0.034774866 #> 9    8 -0.68137984 -0.665516769 #> 10  32  0.41771190  0.518916955 #> 11  30  1.11281162  0.538211463 #> 12  44  0.08613348  0.111778407 #> 13  46 -0.75029639 -0.796466534 #> 14  22 -0.67330868 -0.688752397 #> 15  40 -1.20054114 -1.301720562 #> 16  30  0.39676020  0.732134824 #> 17  60  0.22194567  0.543078167 #> 18  36  0.25191305  0.434458715 #> 19  60  0.71404233  0.880860097 #> 20  36 -0.91604347 -0.759558068 #> 21  58  0.67139140  0.415969976 #> 22  40  1.21947217  1.441140252 #> 23  34  0.33846806  0.205837248 #> 24  40 -0.98449031 -0.882694054 #> 25  64  0.04019071  0.178884132 #> 26  26 -0.35238462 -0.366333503 #> 27  26  0.29862616  0.551341277 #> 28  66  0.39788982  0.350349316 #> 29  48 -0.51541804 -0.692309354 #> 30  14 -0.20976341  0.025731841 #> 31  60  0.08004557  0.260410672 #> 32  52 -0.28224017 -0.189857428 #> 33  20  0.11375327  0.081113592 #> 34  30  0.12853944  0.354045634 #> 35  56 -0.16885040 -0.342201593 #> 36  46  0.15228623 -0.027168989 #> 37  52  0.36221854  0.309529621 #> 38  30 -0.34258665 -0.162344715 #> 39  40  0.33074295 -0.115007554 #> 40  46  0.86270981  0.507714856 #> 41  44  0.16067285  0.094743023 #> 42  32  0.28815795 -0.048047856 #> 43  44 -0.70499609 -0.627156769 #> 44  36 -0.49775103 -0.727641593 #> 45  48  0.78014947  0.585727525 #> 46  14  0.10179700  0.166972621 #> 47  32 -0.19381740 -0.390963946 #> 48  44  0.45980742  0.880290311 #> 49  44 -0.18986946 -0.367066998 #> 50  32  0.37212263  0.502838305 #> 51  54 -0.59159105 -0.726077338 #> 52  36  0.13820953  0.412740339 #> 53  48 -0.17810886 -0.364378784 #> 54  38  0.49386193  0.312374877 #> 55  52 -0.13361682 -0.013720847 #> 56  48  0.24001364  0.594751986 #> 57  30  0.38371137  0.529897650 #> 58  32  0.46972104  0.375083374 #> 59  20 -0.52660630 -0.306364087 #> 60  50  0.50680889  0.060905115 #> 61  48 -0.62708662 -0.480724423 #> 62  42 -0.19029182 -0.087017759 #> 63  16  0.10454441  0.160216409 #> 64  26 -0.06237809  0.005273069 #> 65  36  1.09318897  1.031005329 #> 66  26  0.04101162 -0.301954708 #> 67  34  1.05605102  1.592781611 #> 68  62  0.51717135  0.408599441 #> 69  46 -0.09908660 -0.277930383 #> 70  18 -0.51961479 -0.411171528 #> 71  20 -0.06683205  0.058090708 #> 72  54 -0.29101810 -0.265825394 #> 73  50 -0.45150561 -0.301892062 #> 74  34 -0.40091587 -0.468773592 #> 75  42  0.66041034  0.632834013 #> 76  48  0.51958982  0.606783942 #> 77   8  0.27905552 -0.070952444 #> 78  48 -0.66434357 -0.548251031 #> 79  72 -0.96227839 -1.341979596 #> 80  32  0.01134770  0.285301371 #> 81  44 -0.29074421 -0.192195015 #> 82  30 -0.11207581  0.009216599 #> 83  26  0.59921709  0.213300606 #> 84  68 -0.67928936 -0.546241835 #> 85  18 -0.01003569  0.195122614 #> 86  56  0.44506672  0.629947466 #> 87  38 -0.01392945  0.190647482 #> 88  28 -0.43966933 -0.355124416 #> 89  48  0.38266102  0.541580823 #> 90   8 -0.48879427 -0.539783475 #> 91  50  0.26515247  0.332732908 #> 92  60  0.46745299  0.507476081 #> 93  34  0.17309414  0.135749209 #> 94  32 -0.36679042 -1.005220564 #> 95  22  0.35522160  0.287387874 #> 96  50 -0.16135402 -0.018783716 #> 97  44 -0.18031927 -0.178758180 #> 98  40  0.07757665 -0.196031042 #> 99  32 -0.69545307 -0.664308741 #> 100 40  0.68659701  0.552990749 #> 101 44 -0.43257484 -0.524339492 #> 102 14 -0.65125442 -0.711346529 #> 103 18  0.44671038  0.262839443 #> 104 16 -0.44018833 -0.342319368 #> 105 40 -0.20830972 -0.147333039 #> 106 34 -0.02031458 -0.146168767 #> 107 48  0.07179483  0.228097356 #> 108 36  0.04875569 -0.353462512 #> 109 42  0.08321484  0.217963002 #> 110 48  0.73815555  0.551954362 #> 111 38 -0.77300477 -0.780651379 #> 112 28  0.68546352  0.990646513 #> 113 48 -0.15343848 -0.022634990 #> 114 26 -0.08907482 -0.207256657 #> 115 60  0.42043278  0.824740476 #> 116 58 -0.35192733 -0.547086944 #> 117 44 -0.19017427 -0.311305763 #> 118 60 -0.30642373 -0.014485949 #> 119 24 -0.42380505 -0.371865329 #> 120 36  0.72562874  0.815556112 #>  #> $tau2_est #> [1] 0.6674238 #>  SimulateSMD(k_train = 50, distribution = \"bernoulli\") #> $training #>            vi           yi X1 X2 X3 X4 X5 #> 1  0.18601400  0.319895727  0  0  1  0  0 #> 2  0.12908127 -0.812082670  0  1  1  0  1 #> 3  0.09927040 -0.798594168  0  1  1  0  0 #> 4  0.11990888  0.726149321  1  1  0  0  1 #> 5  0.18917092  0.478131978  0  1  1  1  1 #> 6  0.17066258  0.324363499  0  1  1  0  0 #> 7  0.08094759  0.176391629  1  1  0  0  0 #> 8  0.07566772  0.634285362  1  0  1  1  1 #> 9  0.07462181  0.007458783  0  0  0  0  1 #> 10 0.11292781  0.229303650  0  0  0  1  0 #> 11 0.17017988  1.160447761  1  0  0  0  0 #> 12 0.08472345 -0.257861306  1  0  0  1  1 #> 13 0.15017861  0.553690447  1  0  1  0  1 #> 14 0.09806810 -0.400214164  1  0  0  0  0 #> 15 0.09356224  0.397827304  0  1  0  0  0 #> 16 0.05172868 -0.156982870  0  0  1  0  1 #> 17 0.22846438  0.399732086  1  1  1  1  1 #> 18 0.08054809 -0.551492525  0  0  0  0  1 #> 19 0.13465681 -0.003788886  0  0  0  0  1 #> 20 0.09712561  0.291156233  0  0  0  0  0 #> 21 0.12137039  0.407408446  0  1  0  0  0 #> 22 0.11344873  0.296651657  0  0  1  0  0 #> 23 0.09458856 -0.494447331  0  1  1  0  0 #> 24 0.08105376 -0.203238217  0  1  0  1  1 #> 25 0.07528058 -0.261855272  0  0  0  1  0 #> 26 0.07810811  0.602189056  0  0  1  0  0 #> 27 0.06303621  0.126754249  1  0  0  0  1 #> 28 0.08284619  0.924873736  1  0  1  0  1 #> 29 0.15626989 -0.207765217  0  0  1  0  1 #> 30 0.14454850  0.117504965  1  1  1  1  0 #> 31 0.06974934 -0.183370252  0  0  0  0  0 #> 32 0.08062792  0.020620029  0  0  0  0  1 #> 33 0.09053356 -0.501793791  0  0  1  1  0 #> 34 0.08096069  0.179921167  0  1  1  1  1 #> 35 0.09033763  0.965690186  1  1  1  0  0 #> 36 0.08576725  0.403139418  1  1  0  1  1 #> 37 0.10022729  0.576980052  1  0  1  1  1 #> 38 0.08529411 -0.344953822  0  0  0  1  0 #> 39 0.11947109  0.210777090  1  1  1  1  0 #> 40 0.10032725  0.583868790  1  0  1  1  0 #> 41 0.16025542 -0.484222913  0  0  0  1  1 #> 42 0.08852121  0.644892130  1  0  1  1  0 #> 43 0.08509067 -0.316664515  0  1  1  0  0 #> 44 0.12186025  0.812395246  1  0  0  0  0 #> 45 0.07298096  0.334883504  1  1  0  1  0 #> 46 0.10632390  0.083222187  0  0  0  0  1 #> 47 0.07853519  0.320709464  1  1  1  0  1 #> 48 0.07221412  0.171255885  0  0  1  1  0 #> 49 0.19206449  1.987575997  1  0  1  1  0 #> 50 0.09269076  0.291655586  1  1  1  0  0 #>  #> $testing #>               yi X1 X2 X3 X4 X5 #> 51   1.012904966  1  1  0  0  0 #> 52   0.374774057  1  1  0  1  1 #> 53  -0.455105328  0  1  1  0  0 #> 54  -0.669119888  0  1  1  0  1 #> 55  -0.145538268  0  1  1  1  0 #> 56   0.552748170  0  1  0  0  1 #> 57  -0.458606161  0  1  0  0  1 #> 58  -0.009677788  1  0  1  0  1 #> 59   0.625725427  0  0  0  1  0 #> 60   0.361134730  1  0  1  0  1 #> 61   0.542193010  1  1  0  0  1 #> 62  -0.297937323  0  0  0  0  0 #> 63   0.259755323  1  1  0  1  1 #> 64   0.706061426  1  1  0  1  0 #> 65   0.803470423  1  0  1  1  1 #> 66   0.435566593  0  1  1  0  1 #> 67   0.174003618  1  0  0  1  1 #> 68  -0.261874325  0  0  0  1  1 #> 69  -0.657704227  0  0  0  0  1 #> 70   1.348900101  1  1  0  1  0 #> 71   0.491722164  1  1  1  0  0 #> 72   0.459387290  0  1  1  0  0 #> 73  -0.115919994  0  1  1  0  0 #> 74  -0.692632618  1  1  1  1  0 #> 75   0.626283494  1  0  1  1  1 #> 76  -0.145243748  0  1  1  0  1 #> 77  -0.406112777  1  0  0  0  0 #> 78   0.682455822  0  1  0  0  0 #> 79  -0.406093497  0  1  0  1  0 #> 80  -0.925157959  0  0  0  0  0 #> 81   0.793949861  1  1  0  1  0 #> 82  -0.154417503  0  0  1  0  0 #> 83   0.883598016  1  1  0  0  0 #> 84   0.511118156  1  0  0  1  0 #> 85   0.199453022  1  1  1  1  0 #> 86  -0.186660791  0  1  1  0  1 #> 87  -0.050823065  0  1  1  1  1 #> 88   0.093765476  0  0  1  0  0 #> 89   0.185497677  1  1  1  1  1 #> 90   0.703378447  0  1  1  1  1 #> 91   0.613453650  1  0  1  0  1 #> 92   1.436737422  1  1  1  1  0 #> 93   0.338012947  0  1  0  1  1 #> 94   0.027831583  1  0  0  1  0 #> 95  -0.502460116  0  1  1  0  0 #> 96   0.572883364  1  0  1  1  0 #> 97   0.115567203  0  0  0  1  1 #> 98  -0.075235249  0  1  1  0  0 #> 99   0.759880868  1  0  0  1  1 #> 100  0.272740571  1  0  0  1  0 #> 101  0.841180697  1  1  0  1  1 #> 102 -0.166823745  0  1  1  0  0 #> 103  0.166991396  1  1  1  0  0 #> 104  0.305854368  1  0  0  0  1 #> 105 -0.571938299  0  1  1  0  0 #> 106  0.465967753  1  1  1  0  0 #> 107  0.378830454  1  1  1  1  1 #> 108  0.532428080  1  0  0  1  0 #> 109  0.459242178  1  1  1  1  0 #> 110 -0.363940773  0  1  1  0  1 #> 111  0.122211241  1  1  1  1  0 #> 112 -0.139589124  0  1  1  0  0 #> 113 -0.290900568  0  1  0  1  1 #> 114 -0.140285503  0  0  1  1  0 #> 115 -0.374212002  0  0  1  1  0 #> 116  1.003239234  1  0  0  0  1 #> 117 -0.828637399  0  0  0  0  1 #> 118  0.079694661  1  1  1  1  0 #> 119  0.029921814  0  1  0  1  0 #> 120  0.278153302  1  0  1  1  0 #> 121  0.803054657  1  1  1  1  1 #> 122  0.359287189  0  0  1  0  0 #> 123 -0.482613334  0  1  0  1  0 #> 124 -0.084650908  1  0  0  0  1 #> 125 -0.223874503  0  0  1  1  1 #> 126  0.324810103  1  0  1  1  0 #> 127  0.993530246  1  1  0  1  1 #> 128 -0.003850118  1  0  0  0  0 #> 129  0.152511001  0  1  0  1  0 #> 130 -0.002716635  0  1  1  1  1 #> 131  0.455796944  0  0  1  0  0 #> 132  0.875830915  0  0  1  0  1 #> 133  0.246528549  1  0  0  0  0 #> 134  0.349252780  1  1  1  0  1 #> 135  0.445560610  0  1  1  0  0 #> 136  0.152314692  1  0  1  1  0 #> 137 -0.268616187  1  0  1  0  0 #> 138 -0.787108297  0  0  1  1  0 #> 139  0.051764455  1  1  1  1  1 #> 140  0.044816251  1  1  1  0  1 #> 141 -0.320510163  0  1  1  1  1 #> 142  0.490135511  1  0  1  0  0 #> 143  0.439386341  1  1  0  0  0 #> 144  0.874346062  1  1  0  1  0 #> 145 -0.414164722  1  0  1  1  0 #> 146  1.138882803  1  0  1  1  1 #> 147  0.721229647  1  0  0  1  1 #> 148  0.458024016  1  1  1  0  0 #> 149  0.331885547  0  1  1  1  1 #> 150  0.039939278  0  1  1  1  0 #>  #> $housekeeping #>      n mu_i      theta_i #> 1   20  0.0  0.236457864 #> 2   32  0.0 -0.141724215 #> 3   42  0.0  0.096427145 #> 4   34  0.5  0.694802939 #> 5   20  0.0 -0.239674004 #> 6   22  0.0  0.182219776 #> 7   48  0.5  0.327600385 #> 8   54  0.5  0.424319040 #> 9   52  0.0  0.075423476 #> 10  34  0.0  0.450004325 #> 11  26  0.5  0.683344207 #> 12  46  0.5  0.259912083 #> 13  26  0.5  0.499302746 #> 14  40  0.5  0.285212568 #> 15  42  0.0  0.250052333 #> 16  76  0.0 -0.055583462 #> 17  16  0.5  0.351732483 #> 18  50  0.0 -0.023919158 #> 19  28  0.0  0.249561999 #> 20  40  0.0  0.081809895 #> 21  32  0.0  0.107553678 #> 22  34  0.0  0.445909030 #> 23  42  0.0 -0.290566931 #> 24  48  0.0  0.064367379 #> 25  52  0.0 -0.163375817 #> 26  52  0.0  0.063575485 #> 27  62  0.5  0.473614683 #> 28  52  0.5  0.575362963 #> 29  24  0.0  0.124391768 #> 30  26  0.5  0.240334098 #> 31  56  0.0 -0.209489275 #> 32  48  0.0  0.317906906 #> 33  44  0.0 -0.388176769 #> 34  48  0.0 -0.064779051 #> 35  48  0.5  0.620411220 #> 36  46  0.5  0.414041950 #> 37  40  0.5  0.623995860 #> 38  46  0.0  0.056201448 #> 39  32  0.5  0.319016567 #> 40  40  0.5  0.380514481 #> 41  24  0.0 -0.278942986 #> 42  46  0.5  0.360546875 #> 43  46  0.0 -0.154107231 #> 44  34  0.5  0.758003747 #> 45  54  0.5  0.420998449 #> 46  36  0.0 -0.042406223 #> 47  50  0.5  0.356445304 #> 48  54  0.0 -0.143298699 #> 49  30  0.5  0.621913771 #> 50  42  0.5  0.470757003 #> 51  46  0.5  0.667803624 #> 52  32  0.5  0.275786748 #> 53  66  0.0 -0.032610490 #> 54  28  0.0 -0.261275484 #> 55  20  0.0 -0.001423038 #> 56  42  0.0  0.233271325 #> 57  18  0.0 -0.162185915 #> 58  36  0.5  0.313974053 #> 59  28  0.0 -0.028776824 #> 60  24  0.5  0.881426443 #> 61  54  0.5  0.548352510 #> 62  30  0.0  0.206138982 #> 63  44  0.5  0.256361706 #> 64  44  0.5  0.384669678 #> 65  46  0.5  0.710480564 #> 66  28  0.0 -0.145602348 #> 67  34  0.5  0.394022960 #> 68  40  0.0 -0.139210812 #> 69  50  0.0  0.303460137 #> 70  42  0.5  0.835366692 #> 71  38  0.5  0.803723290 #> 72  34  0.0 -0.007447504 #> 73  44  0.0 -0.198260982 #> 74   8  0.5  0.274965809 #> 75  38  0.5  0.646899407 #> 76  30  0.0  0.049055930 #> 77  46  0.5  0.400398777 #> 78  42  0.0 -0.086547465 #> 79  16  0.0 -0.171420170 #> 80  32  0.0  0.103726034 #> 81  64  0.5  0.965507467 #> 82  36  0.0 -0.024407347 #> 83  40  0.5  0.681232917 #> 84  28  0.5  0.456687037 #> 85  50  0.5  0.113845557 #> 86  44  0.0  0.170289562 #> 87  32  0.0 -0.018967038 #> 88  60  0.0 -0.060745530 #> 89  38  0.5  0.781560507 #> 90   8  0.0 -0.096564537 #> 91  44  0.5  0.652421963 #> 92  26  0.5  0.723186228 #> 93  24  0.0  0.011164221 #> 94  50  0.5  0.044155169 #> 95  44  0.0 -0.001217579 #> 96  30  0.5  0.690616637 #> 97  64  0.0 -0.194712087 #> 98  68  0.0 -0.109612307 #> 99  42  0.5  0.594715999 #> 100 50  0.5  0.472352492 #> 101 32  0.5  0.642653882 #> 102 42  0.0 -0.122421868 #> 103 52  0.5  0.222533065 #> 104 30  0.5  0.406813361 #> 105 42  0.0 -0.001870094 #> 106 58  0.5  0.173989969 #> 107 36  0.5  0.632137309 #> 108 38  0.5  0.849246683 #> 109 64  0.5  0.453708673 #> 110 62  0.0  0.101279461 #> 111 26  0.5  0.403328813 #> 112 48  0.0 -0.149606156 #> 113 22  0.0 -0.382438709 #> 114 56  0.0 -0.227191976 #> 115 44  0.0 -0.135577057 #> 116 30  0.5  0.751593116 #> 117 36  0.0 -0.507693606 #> 118 42  0.5  0.166680013 #> 119  8  0.0  0.040361747 #> 120 48  0.5  0.259946504 #> 121 50  0.5  0.804348627 #> 122 46  0.0  0.203900854 #> 123 52  0.0  0.135880521 #> 124 66  0.5  0.333272677 #> 125 50  0.0 -0.028153004 #> 126 42  0.5  0.398409937 #> 127 42  0.5  0.493365874 #> 128 36  0.5  0.500086117 #> 129 24  0.0  0.149474223 #> 130 30  0.0  0.075034492 #> 131 42  0.0  0.064684728 #> 132 16  0.0  0.023972886 #> 133 60  0.5  0.303310332 #> 134 44  0.5  0.254670557 #> 135 44  0.0  0.395850703 #> 136 40  0.5  0.192303599 #> 137 18  0.5  0.278825155 #> 138 34  0.0 -0.194509557 #> 139 56  0.5  0.623430966 #> 140 32  0.5  0.475578367 #> 141 54  0.0  0.002538519 #> 142 52  0.5  0.549976149 #> 143 50  0.5  0.552210075 #> 144 56  0.5  0.431615110 #> 145 42  0.5  0.508575722 #> 146 18  0.5  0.247560578 #> 147 44  0.5  0.529930265 #> 148 18  0.5  0.479428248 #> 149 40  0.0  0.054100153 #> 150 50  0.0  0.002462566 #>  #> $tau2_est #> [1] 0.1328458 #>  SimulateSMD(distribution = \"bernoulli\", model = es * x[ ,1] * x[ ,2]) #> $training #>            vi           yi X1 X2 X3 X4 X5 #> 1  0.08899914 -0.341713574  0  1  0  0  1 #> 2  0.08483423 -0.276918002  1  0  1  0  0 #> 3  0.09905862  0.787377024  0  0  0  1  1 #> 4  0.18638173  0.342114936  0  0  1  0  0 #> 5  0.12243253  0.483692981  1  0  0  1  0 #> 6  0.14826028  0.454774626  0  0  1  1  1 #> 7  0.10629205  0.068062122  0  0  1  0  0 #> 8  0.09861175  0.451290616  1  1  0  0  0 #> 9  0.13792967  0.428128458  0  0  1  1  0 #> 10 0.13697367  0.360219904  1  0  0  0  1 #> 11 0.14428300  0.001076264  1  0  1  0  0 #> 12 0.05932725 -0.135368361  1  0  1  1  1 #> 13 0.07737572  0.535221797  1  1  1  1  0 #> 14 0.12288741  0.854302613  1  0  1  1  0 #> 15 0.09209183 -0.186419459  0  0  1  1  0 #> 16 0.08702929 -0.527853248  0  1  1  1  1 #> 17 0.20435476  0.914310676  1  0  1  1  0 #> 18 0.11230694  0.101786688  1  1  1  0  1 #> 19 0.06989136  0.222555205  1  1  0  0  0 #> 20 0.41513964  0.770120048  1  1  1  0  0 #>  #> $testing #>               yi X1 X2 X3 X4 X5 #> 21   1.395378864  1  1  1  1  0 #> 22  -0.067869107  1  1  0  1  1 #> 23  -0.302146932  1  0  1  1  0 #> 24   0.410507262  1  0  0  0  0 #> 25   0.231038720  1  1  1  1  1 #> 26   0.025904361  1  1  1  0  0 #> 27   0.166662748  1  1  1  1  0 #> 28   0.250770488  0  1  1  0  0 #> 29   0.258631507  1  0  1  0  1 #> 30   0.140105631  0  1  0  0  0 #> 31  -0.057501765  0  1  1  1  1 #> 32   0.173243132  0  0  1  1  1 #> 33  -0.290209083  0  0  1  0  1 #> 34  -0.431566128  0  0  1  1  0 #> 35   0.021351607  1  0  0  1  0 #> 36   0.206182083  1  0  0  1  0 #> 37  -0.232677396  1  0  1  0  0 #> 38   0.048029773  0  0  1  1  1 #> 39   0.484059472  0  1  1  1  1 #> 40   0.125639708  1  1  0  1  0 #> 41   0.675121020  0  1  1  1  1 #> 42   0.287237362  0  1  1  1  0 #> 43  -0.338369412  1  0  1  0  0 #> 44   0.074822076  0  0  0  0  1 #> 45  -0.085615981  0  0  1  1  1 #> 46   0.528662230  1  1  1  1  0 #> 47  -0.104644232  0  0  0  1  0 #> 48   0.309969722  1  1  1  0  0 #> 49  -0.202975543  0  1  1  1  0 #> 50   0.221639650  0  1  0  0  0 #> 51  -0.135852171  0  1  1  0  0 #> 52   0.028421144  0  0  0  0  0 #> 53   0.397051905  0  0  1  1  1 #> 54   0.202422884  1  1  0  1  1 #> 55   0.124097113  0  1  1  0  1 #> 56   0.290230232  1  0  0  1  1 #> 57   0.405228250  1  0  1  0  1 #> 58   0.300594407  1  1  0  1  1 #> 59   0.517528986  0  1  1  0  1 #> 60   1.465508331  1  1  1  0  1 #> 61  -0.482790464  1  0  1  0  1 #> 62  -0.377937818  1  0  1  1  0 #> 63  -0.006511864  1  1  0  1  0 #> 64   0.288785830  0  1  1  1  1 #> 65  -0.229726886  0  0  1  0  1 #> 66   0.253960762  0  0  1  1  0 #> 67   0.045086972  1  1  0  0  0 #> 68   1.629414638  1  1  1  0  0 #> 69   0.310626535  0  0  0  0  1 #> 70  -0.524530601  0  1  0  0  1 #> 71  -0.837544243  0  1  0  1  0 #> 72   0.001063047  1  1  1  0  0 #> 73  -0.512749759  1  0  1  1  0 #> 74   0.492691943  1  0  1  0  0 #> 75   0.338803904  0  1  1  1  1 #> 76  -0.341957673  0  0  1  0  1 #> 77  -0.366096043  0  0  0  1  1 #> 78   0.115912622  0  0  0  1  1 #> 79   0.275936640  1  1  1  0  0 #> 80  -0.013144811  1  0  0  1  0 #> 81   0.379774474  0  0  1  1  1 #> 82   0.287611210  0  1  1  1  1 #> 83  -0.248120632  1  0  0  1  1 #> 84   0.324261855  1  1  0  0  1 #> 85   0.321074450  0  0  1  1  0 #> 86  -0.110752661  0  0  1  0  1 #> 87   0.603823919  1  1  1  0  0 #> 88   0.803019196  1  0  0  0  0 #> 89   0.316675897  0  0  1  1  1 #> 90  -0.470775777  0  1  1  0  0 #> 91   0.090001988  1  1  0  0  0 #> 92   0.124601360  0  0  0  0  0 #> 93   0.677368091  1  1  0  0  0 #> 94   0.325373415  0  0  1  1  0 #> 95  -0.342912459  1  0  1  0  1 #> 96  -0.373029080  0  1  0  1  0 #> 97   0.602362964  1  0  1  0  1 #> 98  -0.083063136  0  0  1  0  1 #> 99  -0.180973084  0  1  0  0  1 #> 100  1.052343474  1  1  1  1  1 #> 101  0.424489594  1  1  0  0  0 #> 102  0.419941381  0  0  1  0  0 #> 103  0.097763076  0  0  1  0  1 #> 104 -0.273573040  0  0  0  0  1 #> 105  0.222844134  0  1  1  0  0 #> 106  0.219034185  0  0  0  1  1 #> 107  1.132880147  1  1  0  0  0 #> 108  0.063847614  0  1  1  1  0 #> 109  0.376217438  1  1  1  1  0 #> 110 -0.118153394  1  0  0  0  0 #> 111  0.380284516  1  1  1  1  0 #> 112 -0.247431475  1  0  1  1  1 #> 113 -0.015349927  1  0  1  1  1 #> 114  0.200829361  0  0  0  0  0 #> 115 -0.736967788  1  0  0  1  0 #> 116  0.560959434  0  1  0  0  1 #> 117 -0.044711686  0  0  0  1  0 #> 118  0.313728749  1  0  0  1  0 #> 119  0.614234855  1  0  1  0  1 #> 120  0.286811516  0  0  0  1  0 #>  #> $housekeeping #>      n mu_i       theta_i #> 1   44  0.0  0.0218125526 #> 2   46  0.0 -0.1400336659 #> 3   42  0.0  0.2903092867 #> 4   20  0.0 -0.1885532832 #> 5   32  0.0 -0.2237167036 #> 6   26  0.0 -0.0318303262 #> 7   36  0.0 -0.1436029033 #> 8   40  0.5  0.5855103000 #> 9   28  0.0  0.2907177529 #> 10  28  0.0  0.0125872729 #> 11  26  0.0 -0.1842569671 #> 12  66  0.0  0.1125469471 #> 13  52  0.5  0.4169749577 #> 14  34  0.0  0.2312223158 #> 15  42  0.0 -0.2127099472 #> 16  46  0.0 -0.3979757558 #> 17  20  0.0 -0.0105729020 #> 18  34  0.5  0.4848077501 #> 19  56  0.5  0.1892874080 #> 20   8  0.5  0.5664453453 #> 21  38  0.5  0.6394519471 #> 22  30  0.5  0.3213496882 #> 23  26  0.0  0.0267255964 #> 24  24  0.0  0.2174360110 #> 25  42  0.5  0.3792154885 #> 26  48  0.5  0.4254662442 #> 27  60  0.5  0.7224911756 #> 28  44  0.0  0.0557765292 #> 29  28  0.0  0.0774486740 #> 30  52  0.0 -0.1829443964 #> 31  46  0.0  0.0464188440 #> 32  56  0.0  0.0495502162 #> 33  14  0.0 -0.0539594794 #> 34  46  0.0 -0.4151037803 #> 35  48  0.0  0.0558204054 #> 36  32  0.0 -0.2076633112 #> 37  54  0.0 -0.0534839040 #> 38  24  0.0 -0.0838029318 #> 39  34  0.0  0.2865577193 #> 40  20  0.5  0.2808178562 #> 41  54  0.0  0.3559495877 #> 42  32  0.0  0.2825776675 #> 43  42  0.0 -0.2057400734 #> 44  54  0.0 -0.0148102239 #> 45  24  0.0 -0.3895915563 #> 46  36  0.5  0.4223380417 #> 47  56  0.0  0.0664195707 #> 48  18  0.5  0.2533554459 #> 49  74  0.0 -0.1311496470 #> 50  82  0.0  0.1352062513 #> 51  54  0.0  0.1108675363 #> 52  46  0.0  0.0361174307 #> 53  32  0.0  0.3182052380 #> 54  16  0.5  0.3002933080 #> 55  44  0.0 -0.2509113668 #> 56  30  0.0  0.5795005516 #> 57  14  0.0  0.2096930659 #> 58  50  0.5  0.1968983139 #> 59  48  0.0  0.3070117044 #> 60  36  0.5  0.6359222265 #> 61  44  0.0 -0.3557027533 #> 62  38  0.0 -0.1609213218 #> 63  50  0.5  0.1303641437 #> 64  32  0.0  0.3234341495 #> 65  40  0.0 -0.0117268317 #> 66  24  0.0  0.0130395502 #> 67  48  0.5  0.4490052228 #> 68  42  0.5  0.9222438706 #> 69  48  0.0 -0.0623635512 #> 70  24  0.0 -0.1890979353 #> 71  26  0.0 -0.0499581918 #> 72  32  0.5  0.0291782348 #> 73  26  0.0 -0.1476377860 #> 74  26  0.0  0.3384559092 #> 75  56  0.0 -0.0496715355 #> 76  16  0.0  0.0446072712 #> 77  26  0.0 -0.4102490769 #> 78  30  0.0  0.1648840286 #> 79  46  0.5  0.5495568846 #> 80  30  0.0 -0.2380674633 #> 81  26  0.0  0.0618427053 #> 82  56  0.0  0.4102666857 #> 83  36  0.0 -0.1108318810 #> 84  38  0.5  0.2173489832 #> 85  48  0.0 -0.1174462182 #> 86  54  0.0  0.1393623175 #> 87  26  0.5  0.3670222764 #> 88  36  0.0 -0.0819854190 #> 89  40  0.0 -0.0240307758 #> 90  46  0.0  0.1293133482 #> 91  46  0.5  0.3058202055 #> 92  46  0.0  0.3124133559 #> 93  40  0.5  0.4429591925 #> 94  42  0.0  0.0758241443 #> 95  58  0.0 -0.1479747575 #> 96  46  0.0  0.0281714361 #> 97  30  0.0  0.2961704360 #> 98  56  0.0 -0.3905419081 #> 99  44  0.0  0.0832442396 #> 100 44  0.5  0.8315698641 #> 101 38  0.5  0.6580547967 #> 102 54  0.0 -0.1371291310 #> 103 56  0.0 -0.2003559292 #> 104 40  0.0  0.0114756443 #> 105 20  0.0  0.1161416058 #> 106 42  0.0  0.3028432146 #> 107 36  0.5  0.6304958577 #> 108 34  0.0 -0.0006682723 #> 109 34  0.5  0.7146986789 #> 110 24  0.0 -0.1710327677 #> 111 22  0.5  0.4508727549 #> 112 48  0.0 -0.2833941434 #> 113 38  0.0 -0.0457327018 #> 114 48  0.0  0.3815720293 #> 115 26  0.0 -0.1168532321 #> 116 46  0.0  0.4633429161 #> 117 52  0.0  0.2012577320 #> 118 52  0.0  0.1859872420 #> 119 56  0.0  0.3185620694 #> 120 56  0.0  0.4965323615 #>  #> $tau2_est #> [1] 0.06402135 #>"},{"path":"https://cjvanlissa.github.io/metaforest/reference/VarImpPlot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots variable importance for a MetaForest object. — VarImpPlot","title":"Plots variable importance for a MetaForest object. — VarImpPlot","text":"Plots variable importance MetaForest object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/VarImpPlot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots variable importance for a MetaForest object. — VarImpPlot","text":"","code":"VarImpPlot(mf, n.var = 30, sort = TRUE, ...)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/VarImpPlot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots variable importance for a MetaForest object. — VarImpPlot","text":"mf MetaForest object. n.var Number moderators plot. sort moderators sorted least important? ... Parameters passed functions.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/VarImpPlot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots variable importance for a MetaForest object. — VarImpPlot","text":"ggplot object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/VarImpPlot.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots variable importance for a MetaForest object. — VarImpPlot","text":"","code":"set.seed(42) data <- SimulateSMD() mf.random <- MetaForest(formula = yi ~ ., data = data$training,                         whichweights = \"random\", method = \"DL\",                         tau2 = 0.0116) VarImpPlot(mf.random)  VarImpPlot(mf.random, n.var = 2)  VarImpPlot(mf.random, sort = FALSE)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/WeightedScatter.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots weighted scatterplots for meta-analytic data. Can plot effect size as a function of either continuous (numeric, integer) or categorical (factor, character) predictors. — WeightedScatter","title":"Plots weighted scatterplots for meta-analytic data. Can plot effect size as a function of either continuous (numeric, integer) or categorical (factor, character) predictors. — WeightedScatter","text":"Plots weighted scatterplots meta-analytic data. Can plot effect size function either continuous (numeric, integer) categorical (factor, character) predictors.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/WeightedScatter.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots weighted scatterplots for meta-analytic data. Can plot effect size as a function of either continuous (numeric, integer) or categorical (factor, character) predictors. — WeightedScatter","text":"","code":"WeightedScatter(   data,   yi = \"yi\",   vi = \"vi\",   vars = NULL,   tau2 = NULL,   summarize = TRUE )"},{"path":"https://cjvanlissa.github.io/metaforest/reference/WeightedScatter.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots weighted scatterplots for meta-analytic data. Can plot effect size as a function of either continuous (numeric, integer) or categorical (factor, character) predictors. — WeightedScatter","text":"data data.frame. yi Character. name column data contains meta-analysis effect sizes. Defaults \"yi\". vi Character. name column data contains variances effect sizes. Defaults \"vi\". default, vi used calculate fixed-effects weights, fixed effects weights summarize data set hand, rather generalizing population. vars Character vector containing names specific moderator variables plot. set NULL, default, moderators plotted. tau2 Numeric. Provide optional value tau2. value provided, random-effects weights used instead fixed-effects weights. summarize Logical. summary stats displayed? Defaults FALSE. TRUE, smooth trend line displayed continuous variables, using [stats::loess()] less 1000 observations, [mgcv::gam()] larger datasets. categorical variables, box--whiskers plots displayed. Outliers omitted, raw data fulfill function.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/WeightedScatter.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots weighted scatterplots for meta-analytic data. Can plot effect size as a function of either continuous (numeric, integer) or categorical (factor, character) predictors. — WeightedScatter","text":"gtable object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/WeightedScatter.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Plots weighted scatterplots for meta-analytic data. Can plot effect size as a function of either continuous (numeric, integer) or categorical (factor, character) predictors. — WeightedScatter","text":"","code":"if (FALSE) { # \\dontrun{ set.seed(42) data <- SimulateSMD(k_train = 100, model = es * x[, 1] + es * x[, 2] + es *                       x[, 1] * x[, 2])$training data$X2 <- cut(data$X2, breaks = 2, labels = c(\"Low\", \"High\")) data$X3 <- cut(data$X3, breaks = 2, labels = c(\"Small\", \"Big\")) WeightedScatter(data, summarize = FALSE) WeightedScatter(data, vars = c(\"X3\")) WeightedScatter(data, vars = c(\"X1\", \"X3\")) } # }"},{"path":"https://cjvanlissa.github.io/metaforest/reference/coef_test.html","id":null,"dir":"Reference","previous_headings":"","what":"Test coefficients of a model — coef_test","title":"Test coefficients of a model — coef_test","text":"Conduct t-test z-test coefficients model.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/coef_test.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Test coefficients of a model — coef_test","text":"","code":"coef_test(x, par1, par2, distribution = \"pt\")"},{"path":"https://cjvanlissa.github.io/metaforest/reference/coef_test.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Test coefficients of a model — coef_test","text":"x model. par1 Numeric character. Name position first parameter. par2 Numeric character. Name position second parameter. distribution Character. distribution use. Currently, can one c(\"pt\", \"pnorm\"), t-test z-test, respectively. Defaults \"pt\".","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/coef_test.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Test coefficients of a model — coef_test","text":"Named vector.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/coef_test.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Test coefficients of a model — coef_test","text":"","code":"data(\"dat.bcg\", package = \"metadat\") dat <- metafor::escalc(measure=\"RR\", ai=tpos, bi=tneg, ci=cpos, di=cneg, data=dat.bcg) res <- metafor::rma(yi, vi, mods = ~alloc-1, data=dat, method=\"REML\") coef_test(res, 1, 2) #> t(11) = 0.87, p = 0.40"},{"path":"https://cjvanlissa.github.io/metaforest/reference/curry.html","id":null,"dir":"Reference","previous_headings":"","what":"Happy to Help? — curry","title":"Happy to Help? — curry","text":"systematic review meta-analysis effects performing acts kindness well-actor.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/curry.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Happy to Help? — curry","text":"","code":"data(curry)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/curry.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Happy to Help? — curry","text":"data.frame 56 rows 18 columns.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/curry.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Happy to Help? — curry","text":"doi:10.1016/j.jesp.2018.02.014","code":""},{"path":[]},{"path":"https://cjvanlissa.github.io/metaforest/reference/curry.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Happy to Help? — curry","text":"Curry, O. S., Rowland, L. ., Van Lissa, C. J., Zlotowitz, S., McAlaney, J., & Whitehouse, H. (2018). Happy help? systematic review meta-analysis effects performing acts kindness well-actor. Journal Experimental Social Psychology, 76, 320-329. doi:10.1016/j.jesp.2018.02.014","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/extract_proximity.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract proximity matrix for a MetaForest object. — extract_proximity","title":"Extract proximity matrix for a MetaForest object. — extract_proximity","text":"Extract proximity matrix MetaForest object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/extract_proximity.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract proximity matrix for a MetaForest object. — extract_proximity","text":"","code":"extract_proximity(fit, newdata)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/extract_proximity.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract proximity matrix for a MetaForest object. — extract_proximity","text":"fit object class \\'MetaForest\\'. newdata new data columns data used fit","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/extract_proximity.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract proximity matrix for a MetaForest object. — extract_proximity","text":"n x n matrix position , j gives proportion times observation j terminal node across trees.","code":""},{"path":[]},{"path":"https://cjvanlissa.github.io/metaforest/reference/fukkink_lont.html","id":null,"dir":"Reference","previous_headings":"","what":"Does training matter? A meta-analysis of caregiver training studies — fukkink_lont","title":"Does training matter? A meta-analysis of caregiver training studies — fukkink_lont","text":"review 17 experimental studies published 1980 2005 effect specialized training competency caregivers childcare.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/fukkink_lont.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Does training matter? A meta-analysis of caregiver training studies — fukkink_lont","text":"","code":"data(fukkink_lont)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/fukkink_lont.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Does training matter? A meta-analysis of caregiver training studies — fukkink_lont","text":"data.frame 78 rows 30 columns.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/fukkink_lont.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Does training matter? A meta-analysis of caregiver training studies — fukkink_lont","text":"doi:10.1016/j.ecresq.2007.04.005","code":""},{"path":[]},{"path":"https://cjvanlissa.github.io/metaforest/reference/fukkink_lont.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Does training matter? A meta-analysis of caregiver training studies — fukkink_lont","text":"Fukkink, R. G., & Lont, . (2007). training matter? meta-analysis review caregiver training studies. Early childhood research quarterly, 22(3), 294-311. doi:10.1016/j.ecresq.2007.04.005","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/plot.MetaForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Plots cumulative MSE for a MetaForest object. — plot.MetaForest","title":"Plots cumulative MSE for a MetaForest object. — plot.MetaForest","text":"Plots cumulative MSE MetaForest object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/plot.MetaForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plots cumulative MSE for a MetaForest object. — plot.MetaForest","text":"","code":"# S3 method for class 'MetaForest' plot(x, y, ...)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/plot.MetaForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plots cumulative MSE for a MetaForest object. — plot.MetaForest","text":"x MetaForest object. y used plot.MetaForest ... Arguments passed methods, used plot.MetaForest","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/plot.MetaForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plots cumulative MSE for a MetaForest object. — plot.MetaForest","text":"ggplot object, visualizing number trees x-axis, cumulative mean MSE number trees y-axis. visual aid assess convergence, dashed gray line plotted median cumulative MSE value.","code":""},{"path":[]},{"path":"https://cjvanlissa.github.io/metaforest/reference/predict.MetaForest.html","id":null,"dir":"Reference","previous_headings":"","what":"MetaForest prediction — predict.MetaForest","title":"MetaForest prediction — predict.MetaForest","text":"MetaForest prediction","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/predict.MetaForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"MetaForest prediction — predict.MetaForest","text":"","code":"# S3 method for class 'MetaForest' predict(object, data = NULL, type = \"response\", ...)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/predict.MetaForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"MetaForest prediction — predict.MetaForest","text":"object MetaForest object. data New test data class data.frame. type Type prediction. One 'response', 'se', 'terminalNodes' default 'response'. See details. ... arguments passed methods.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/predict.MetaForest.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"MetaForest prediction — predict.MetaForest","text":"Object class MetaForest.prediction elements","code":""},{"path":[]},{"path":"https://cjvanlissa.github.io/metaforest/reference/predict.MetaForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"MetaForest prediction — predict.MetaForest","text":"","code":"set.seed(56) data <- SimulateSMD(k_train = 100, model = es * x[,1] * x[,2]) #Conduct fixed-effects MetaForest analysis mf.fixed <- MetaForest(formula = yi ~ ., data = data$training,                       whichweights = \"fixed\", method = \"DL\") predicted <- predict(mf.fixed, data = data$testing)$predictions r2_cv <- sum((predicted - mean(data$training$yi)) ^ 2)/          sum((data$testing$yi - mean(data$training$yi)) ^ 2)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect.html","id":null,"dir":"Reference","previous_headings":"","what":"Preselect variables for MetaForest analysis — preselect","title":"Preselect variables for MetaForest analysis — preselect","text":"Takes MetaForest object, applies different algorithms variable selection.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Preselect variables for MetaForest analysis — preselect","text":"","code":"preselect(x, replications = 100L, algorithm = \"replicate\", ...)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Preselect variables for MetaForest analysis — preselect","text":"x Model perform variable selection . Accepts MetaForest objects. replications Integer. Number replications run variable preselection. Default: 100. algorithm Character. Preselection method apply. Currently, 'replicate', 'recursive', 'bootstrap' available. ... arguments passed functions.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Preselect variables for MetaForest analysis — preselect","text":"object class 'mf_preselect'","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Preselect variables for MetaForest analysis — preselect","text":"Currently, available methods algorithm : replicate simply replicates analysis, means forest access full data set, trees grown different bootstrap samples across replications (thereby varying monte carlo error). bootstrap replicates analysis bootstrapped samples, means replication access different sub-sample full data set. selecting algorithm, cases either bootstrap-sampled study, new study column generated, clustered MetaForest grown (rows data duplicated) , lead -estimation OOB error. recursive Starting moderators, variable negative variable importance dropped model, analysis re-run. repeated variables positive variable importance left, variables left. proportion final models containing variable reflects importance.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Preselect variables for MetaForest analysis — preselect","text":"","code":"if (FALSE) { # \\dontrun{ data(\"dat.bourassa1996\", package = \"metadat\") df <- dat.bourassa1996 df <- escalc(measure = \"OR\", ai = lh.le, bi = lh.re, ci = rh.le, di= rh.re,                data = df, add = 1/2, to = \"all\") df$mage[is.na(df$mage)] <- median(df$mage, na.rm = TRUE) df[c(5:8)] <- lapply(df[c(5:8)], factor) df$yi <- as.numeric(df$yi) mf.model <- MetaForest(formula = yi~ selection + investigator + hand_assess + eye_assess +                         mage +sex,           df, study = \"sample\",           whichweights = \"unif\", num.trees = 300) preselect(mf.model,           replications = 10,           algorithm = \"bootstrap\") } # }"},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect_vars.html","id":null,"dir":"Reference","previous_headings":"","what":"Extract variable names from mf_preselect object — preselect_vars","title":"Extract variable names from mf_preselect object — preselect_vars","text":"Returns vector variable names mf_preselect object, based cutoff criterion provided.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect_vars.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Extract variable names from mf_preselect object — preselect_vars","text":"","code":"preselect_vars(x, cutoff = NULL, criterion = NULL)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect_vars.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Extract variable names from mf_preselect object — preselect_vars","text":"x Object class mf_preselect. cutoff Numeric. Must value 0 1. default, uses .95 bootstrapped preselection, .1 recursive preselection. criterion Character. criterion use. See Details information. default, uses 'ci' (confidence interval) bootstrapped preselection, 'p' (proportion) recursive preselection.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect_vars.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Extract variable names from mf_preselect object — preselect_vars","text":"Character vector.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect_vars.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Extract variable names from mf_preselect object — preselect_vars","text":"criterion = 'p', function evaluates proportion replications variable achieved positive (>0) variable importance. criterion = 'ci', function evaluates whether lower bound confidence interval variable's importance across replications exceeds zero. width confidence interval determined cutoff. recursive preselection, variable included final model assigned zero importance.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/preselect_vars.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Extract variable names from mf_preselect object — preselect_vars","text":"","code":"if (FALSE) { # \\dontrun{ data(\"dat.bourassa1996\", package = \"metadat\") df <- dat.bourassa1996 df <- escalc(measure = \"OR\", ai = lh.le, bi = lh.re, ci = rh.le, di= rh.re,                data = df, add = 1/2, to = \"all\") df$mage[is.na(df$mage)] <- median(df$mage, na.rm = TRUE) df[c(5:8)] <- lapply(df[c(5:8)], factor) df$yi <- as.numeric(df$yi) preselected <- preselect(formula = yi~ selection + investigator + hand_assess + eye_assess +                         mage +sex,           df, study = \"sample\",           whichweights = \"unif\", num.trees = 300,           replications = 10,           algorithm = \"bootstrap\") preselect_vars(preselected) } # }"},{"path":"https://cjvanlissa.github.io/metaforest/reference/print.summary.MetaForest.html","id":null,"dir":"Reference","previous_headings":"","what":"Prints summary.MetaForest object. — print.summary.MetaForest","title":"Prints summary.MetaForest object. — print.summary.MetaForest","text":"Prints summary.MetaForest object.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/print.summary.MetaForest.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prints summary.MetaForest object. — print.summary.MetaForest","text":"","code":"# S3 method for class 'summary.MetaForest' print(x, digits, ...)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/print.summary.MetaForest.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prints summary.MetaForest object. — print.summary.MetaForest","text":"x object used select method. digits minimal number significant digits, see print.default. ... arguments passed methods.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/print.summary.MetaForest.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prints summary.MetaForest object. — print.summary.MetaForest","text":"","code":"#> MetaForest results #>                                           #> Type of analysis:              MetaForest #> Number of studies:             20         #> Number of moderators:          5          #> Number of trees in forest:     500        #> Candidate variables per split: 2          #> Minimum terminal node size:    5          #> OOB prediction error (MSE):    0.200      #> R squared (OOB):               0.494      #>  #> Tests for Heterogeneity:  #>                                tau2  tau2_SE I^2    H^2   Q-test df Q_p   #> Raw effect sizes:              0.300 0.134   73.989 3.845 72.922 19 0.000 #> Residuals (after MetaForest):  0.102 0.068   49.259 1.971 36.751 19 0.009 #>  #>  #> Random intercept meta-analyses: #>                                Intercept se    ci.lb  ci.ub p     #> Raw effect sizes:              -0.270    0.144 -0.552 0.012 0.061 #> Residuals (after MetaForest):  -0.018    0.103 -0.220 0.185 0.862"},{"path":"https://cjvanlissa.github.io/metaforest/reference/report.html","id":null,"dir":"Reference","previous_headings":"","what":"Report formatted number — report","title":"Report formatted number — report","text":"Report number, rounded specific number decimals (defaults two), using C-style formats. Intended RMarkdown reports.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/report.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Report formatted number — report","text":"","code":"report(x, digits = 2, equals = TRUE)"},{"path":"https://cjvanlissa.github.io/metaforest/reference/report.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Report formatted number — report","text":"x Numeric. Value reported digits Integer. Number digits round . equals Logical. Whether report equals (: smaller ) sign.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/report.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Report formatted number — report","text":"atomic character vector.","code":""},{"path":"https://cjvanlissa.github.io/metaforest/reference/report.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Report formatted number — report","text":"Caspar J. van Lissa","code":""},{"path":"https://cjvanlissa.github.io/metaforest/news/index.html","id":"version-015","dir":"Changelog","previous_headings":"","what":"Version 0.1.5","title":"Version 0.1.5","text":"Better support predefined tau2 values Fixed NOTES CRAN check Fixed plot.ranger() Fixed seq_unif.integer() longer duplicate unique values length.exceeds number unique values","code":""},{"path":"https://cjvanlissa.github.io/metaforest/news/index.html","id":"version-014","dir":"Changelog","previous_headings":"","what":"Version 0.1.4","title":"Version 0.1.4","text":"CRAN release: 2024-01-26 ClusterMF hard deprecated. Replace legacy call ClusterMF call MetaForest arguments. Fixed PartialDependence ranger objects Fixed bug argument “vi” passed ranger()","code":""},{"path":"https://cjvanlissa.github.io/metaforest/news/index.html","id":"version-013","dir":"Changelog","previous_headings":"","what":"Version 0.1.3","title":"Version 0.1.3","text":"CRAN release: 2020-01-08 ClusterMF soft deprecated; functionality MetaForest. can simply replace call ClusterMF call MetaForest arguments. clustered MetaForest analysis longer automatically doubles number trees estimated. Instead, divides num.trees trees two, rounding nearest even number. Generic S3 methods now properly declared , instead exported documentation. Reduce dependencies calculating partial dependence manually","code":""},{"path":"https://cjvanlissa.github.io/metaforest/news/index.html","id":"version-012","dir":"Changelog","previous_headings":"","what":"Version 0.1.2","title":"Version 0.1.2","text":"CRAN release: 2018-05-31 Rewrote WeightedScatter jointly plot numeric factor variables Rewrote PartialDependence S3 generic, methods metaforest rma models Rewrote PartialDependence jointly plot numeric factor variables Added ModelInfo_mf(), returns ModelInfo list using metaforest caret Added ModelInfo_rma(), returns ModelInfo list using rma caret","code":""},{"path":"https://cjvanlissa.github.io/metaforest/news/index.html","id":"version-011","dir":"Changelog","previous_headings":"","what":"Version 0.1.1","title":"Version 0.1.1","text":"Substantial update PartialDependence PartialDependence now plots percentile interval predictions PartialDependence now plots weighted raw data Improved speed PartialDependence Improved speed plot.MetaForest vectorizing calculations Removed dependency edarf Removed dependency reshape2 MetaForest ClusterMF now return vi weights vectors plotting Improved speed extract_proximity.MetaForest using matrix operations Added WeightedScatter weighted scatterplots meta-analytic data","code":""}]
